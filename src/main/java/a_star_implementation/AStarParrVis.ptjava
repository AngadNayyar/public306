package a_star_implementation;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Set;
import java.util.concurrent.CopyOnWriteArrayList;
import java.util.concurrent.PriorityBlockingQueue;

import org.jgrapht.graph.DefaultDirectedWeightedGraph;
import org.jgrapht.graph.DefaultEdge;
import org.jgrapht.graph.DefaultWeightedEdge;

//import processing_classes.MainReadFile;
import processing_classes.Options;
import processing_classes.TaskNode;
import processing_classes.VisualisationGraph;
import pt.runtime.CurrentTask;
import pt.runtime.TaskID;
import pt.runtime.TaskIDGroup;

public class AStarParrVis extends AStarParent{
	
	public AStarParrVis(DefaultDirectedWeightedGraph<TaskNode, DefaultEdge> graph, Options options, VisualisationGraph visualGraphObj) {
		this.graph = graph;
		this.options = options;
		this.visualGraphObj = visualGraphObj;
	}
	
	public AStarParrVis(DefaultDirectedWeightedGraph <TaskNode, DefaultEdge> graph){
		this.graph = graph; 
	}
	
	public void solveAstar() throws InterruptedException{
		
		long startTime = System.currentTimeMillis();
		long counter = 500;
		
		// Property is set for rendering the visual graph
		System.setProperty("org.graphstream.ui.renderer", "org.graphstream.ui.j2dviewer.J2DGraphRenderer");
		
		//Set initial node for openQueue
		TaskNode initialNode = new TaskNode();
		Path initialPath = new Path(initialNode);
		StateWeights initialSW = new StateWeights(initialPath,0.0);
		openQueue.add(initialSW);
		
		//TODO this will be passed in as an option currently setting.
		TaskIDGroup taskGroup = new TaskIDGroup(options.getNumThreads());
		for (int i = 0; i < options.getNumThreads(); i++){
			TaskID id = parallelSearch();
			taskGroup.add(id);
		}
		
		try {
			taskGroup.waitTillFinished();
		} catch (Exception e) {
			e.printStackTrace();
		}
		
		Path optimalPath = getSmallestPathFromList();
		setScheduleOnGraph(optimalPath);
		Thread.sleep(Math.max(counter, 0));
		counter -= 10;
		StateWeights o = new StateWeights(optimalPath,0.0);
		visualGraphObj.update(o, options);
	}
	
	TASK(*) void parallelSearch() throws InterruptedException{
		long startTime = System.currentTimeMillis();
		long counter = 50;
		while (!openQueue.isEmpty()){
			
			//Gets the state with best f value, remove this state from openQueue
			StateWeights stateWeight = openQueue.poll();
			if (stateWeight==null){
				TaskNode initialNode = new TaskNode();
				Path initialPath = new Path(initialNode);
				stateWeight = new StateWeights(initialPath,0.0);
			}
			visualGraphObj.update(stateWeight, options);
			if (isComplete(stateWeight)){				
				//Returns the optimal path
				threadPathList.add(stateWeight.getState());
				Thread.sleep(Math.max(counter, 0));
				counter -= 1;
				visualGraphObj.update(stateWeight, options);
				break;
			} else {
			//Expanding the state to all possible next states
			visualGraphObj.updateNode(stateWeight.state.getCurrent());
			expandState(stateWeight, options.getNumProcessors());
			Thread.sleep(Math.max(counter, 0));
			counter -= 1;
			visualGraphObj.update(stateWeight, options);
			}
			closedQueue.add(stateWeight);
		}
	}
	
	//Gets the smallest path from list produced by the threads
	private Path getSmallestPathFromList(){
		//Gets the optimal path from the threadPathList (threads add to this list)
		int smallestFinPath = Integer.MAX_VALUE;
		int finishTimeOfPath = 0;
		Path optimalPath = null;
		//Gets the smallest path
		for (Path p : threadPathList){
			finishTimeOfPath = 0;
			//Gets the largest finish time on the path
			for (TaskNode n: p.getPath()){
				if (n.finishTime > finishTimeOfPath){
					finishTimeOfPath = n.finishTime; 
				}
			}
			//Checks if found finish time of the path is the smallest and then updates the smallest to that if true
			if (finishTimeOfPath < smallestFinPath) {
				smallestFinPath = finishTimeOfPath;
				optimalPath = p;
			}
		
		}
		return optimalPath;
	}
	
}
